{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","prevGood","currGood","ALPHABET","localeCompare","LENGTH","length","NONE","Error","reverse","App","useState","setIsReversed","setSortType","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAe,YAAIH,GACtBI,MAAK,SAACC,EAAUC,GACf,OAAQL,GACN,KAAKJ,EAASU,SACZ,OAAOF,EAASG,cAAcF,GAEhC,KAAKT,EAASY,OACZ,OAAOJ,EAASK,OAASJ,EAASI,OAEpC,KAAKb,EAASc,KACZ,OAAO,EAET,QACE,MAAM,IAAIC,MAAJ,iCAAoCX,QAIlD,OAAOC,EACHC,EAAaU,UACbV,G,SAlCDN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAMiB,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOb,EAAP,KAAmBc,EAAnB,KACA,EAAgCD,mBAASlB,EAASc,MAAlD,mBAAOV,EAAP,KAAiBgB,EAAjB,KAEA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYnB,IAAaJ,EAASU,WAGtCc,QAAS,kBAAMJ,EAAYpB,EAASU,WARtC,iCAaA,wBACEY,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYnB,IAAaJ,EAASY,SAGtCY,QAAS,kBAAMJ,EAAYpB,EAASY,SARtC,4BAaA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAalB,IAGjBmB,QAAS,kBAAML,GAAed,IARhC,sBAcGD,IAAaJ,EAASc,MAAQT,IAE3B,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPJ,EAAYpB,EAASc,MACrBK,GAAc,IALlB,sBAcR,6BAEIjB,EAAkBD,EAAiB,CAAEG,WAAUC,eAC5CoB,KAAI,SAAAC,GAAI,OACP,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCvHtCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.eb047cc2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods]\n    .sort((prevGood, currGood) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return prevGood.localeCompare(currGood);\n\n        case SortType.LENGTH:\n          return prevGood.length - currGood.length;\n\n        case SortType.NONE:\n          return 0;\n\n        default:\n          throw new Error(`Unknown type of sort - ${sortType}`);\n      }\n    });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortType !== SortType.NONE || isReversed)\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={() => {\n                  setSortType(SortType.NONE);\n                  setIsReversed(false);\n                }}\n              >\n                Reset\n              </button>\n            )\n        }\n      </div>\n\n      <ul>\n        {\n          getReorderedGoods(goodsFromServer, { sortType, isReversed })\n            .map(good => (\n              <li data-cy=\"Good\" key={good}>{good}</li>\n            ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}